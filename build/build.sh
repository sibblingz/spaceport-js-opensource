#!/bin/bash

set -E -e -o pipefail

if (echo "$0" | grep 'build\.sh$'); then
	echo 'Do not execute this script directly' 2>&1
	exit 3
fi

# Source this file with functions:
# build_pre
# build_entry
# build_release_pre

BUILD_TOOLS="$(cd "$(dirname "$0")" && pwd)"
ROOT="$BUILD_TOOLS/.."

function debug {
	echo "$@" >&2
}

function closure_compiler {
	java -jar "$BUILD_TOOLS/google-closure-compiler.jar" --language_in ECMASCRIPT5 "$@"
}

# Make sure UglifyJS exists
UGLIFYJS_ROOT="$BUILD_TOOLS/strager-UglifyJS-e196857"
UGLIFYJS_BIN="$UGLIFYJS_ROOT/bin/uglifyjs"

function uglify {
	NODE_PATH="$UGLIFYJS_ROOT:$NODE_PATH" "$UGLIFYJS_BIN" --no-seqs "$@"
}

function minify {
	# FIXME --closures makes a bunch of ByteArray tests fail.
	# =[
	#uglify -nm --closures -b |
	closure_compiler --compilation_level SIMPLE_OPTIMIZATIONS --jscomp_off uselessCode |
	uglify -nm
}

function replace_constants {
	if $DEBUG; then
		DEBUG_VAL=true
	else
		DEBUG_VAL=false
	fi

	if $CUSTOMER_DEBUG; then
		CUSTOMER_DEBUG_VAL=true
	else
		CUSTOMER_DEBUG_VAL=false
	fi

	sed -e "s/$SED_WORD_BEGIN"CUSTOMER_DEBUG"$SED_WORD_END/$CUSTOMER_DEBUG_VAL/g" |
		sed -e "s/$SED_WORD_BEGIN"DEBUG"$SED_WORD_END/$DEBUG_VAL/g" |
		sed -e "s/$SED_WORD_BEGIN"PROFILE"$SED_WORD_END/false/g"
}

function print_usage {
	cat >&2 <<EOF
Usage: $0 [options] -o file
options:
  -h      Print this help
  -z size Compress output with LZ77 with dictionary size
  -m      Minify output
  -v      Print version
  -d      Output internal debug build
  -D      Output customer debug build
  -o file Required; write output to file
  -q      Quiet
EOF
}

# Detect what works with sed...
SED_TEST_WORD="hello"
SED_WORD_BEGIN=""
SED_WORD_END=""

if ( echo "$SED_TEST_WORD" | sed -n -e "/\b$SED_TEST_WORD\b/p" | grep -q "$SED_TEST_WORD" ); then
	SED_WORD_BEGIN="\b"
	SED_WORD_END="\b"
elif ( echo "$SED_TEST_WORD" | sed -n -e "/\<$SED_TEST_WORD\>/p" | grep -q "$SED_TEST_WORD" ); then
	SED_WORD_BEGIN="\<"
	SED_WORD_END="\>"
elif ( echo "$SED_TEST_WORD" | sed -n -e "/[[:<:]]$SED_TEST_WORD[[:>:]]/p" | grep -q "$SED_TEST_WORD" ); then
	SED_WORD_BEGIN="[[:<:]]"
	SED_WORD_END="[[:>:]]"
else
	echo "I don't understand your version of sed; build failed" >&2
	exit 1
fi

function rename {
	from="$1"
	to="$2"
	shift
	shift

	find_args="$@"
	if [ "$find_args" != "" ]; then
		find_args="-and ( $find_args )"
	fi

	find "$BUILD_DIR" -name '*.js' $find_args -exec \
		sed -i -e "s/$SED_WORD_BEGIN$from$SED_WORD_END/$to/g" {} \+
}

function rename_unsafe {
	from="$1"
	to="$2"
	shift
	shift

	find_args="$@"
	if [ "$find_args" != "" ]; then
		find_args="-and ( $find_args )"
	fi

	find "$BUILD_DIR" -name '*.js' $find_args -exec \
		sed -i -e "s/$from/$to/g" {} \+
}

BUILD_DIR="$(mktemp -d -t spaceport.XXXXXXXXXX)"
OUTPUT=""

trap "rm -r $BUILD_DIR" exit INT TERM

QUIET=false
DEBUG=false
CUSTOMER_DEBUG=false
MINIFY=false
COMPRESS=false
COMPRESS_LEVEL=0

while getopts dz:mo:hvdDq opt; do
	case "$opt" in
		d) DEBUG=true ; CUSTOMER_DEBUG=true ;;
		D) CUSTOMER_DEBUG=true ;;
		z) COMPRESS=true ; COMPRESS_LEVEL="$OPTARG" ;;
		m) MINIFY=true ;;
		o) OUTPUT="$OPTARG" ;;
		h) print_usage "$0" ; exit 0 ;;
		v) echo 'No version, silly!' 2>&1 ; exit 0 ;;
		q) QUIET=true ;;
		\?) print_usage "$0" ; exit 1
	esac
done

if [ "$OUTPUT" = '' ]; then
	print_usage "$0"
	exit 2
fi

build_pre

build_entry | (
	cat<<'EOF'
// !!! DO NOT EDIT THIS FILE !!!
// This file is *automatically generated*
// Changes to this file will be *overridden*!!!
// !!! DO NOT EDIT THIS FILE !!!













// Please do not edit this file.

EOF
	cat
) | build_release_pre | (
	if [ -f "$BUILD_DIR/LICENSE" ]; then
		echo '/*'
		cat "$BUILD_DIR/LICENSE"
		echo '*/'
	fi

	cat
) > "$OUTPUT"

if ! $QUIET; then
	if $DEBUG; then
		echo "Debug build written to $OUTPUT" >&2
	else
		echo "Release build compressed to $OUTPUT" >&2
	fi
fi
